
<!DOCTYPE html>
<html>
<head>
  <title>Video.js | HTML5 Video Player</title>

  <!-- Chang URLs to wherever Video.js files will be hosted -->
  <link href="../js/video-js/video-js.css" rel="stylesheet" type="text/css">
  <!-- video.js must be in the <head> for older IEs to work. -->
  <script src="../js/video-js/video.js"></script>

  <!-- Unless using the CDN hosted version, update the URL to the Flash SWF -->
  <script>
    videojs.options.flash.swf = "video-js.swf";
  </script>
</head>

<body>

  <!-- 
<video id="example_video_1" class="video-js vjs-default-skin" controls preload="none" width="1440" height="990"
      poster="http://video-js.zencoder.com/oceans-clip.png" data-setup="{}" controls autoplay>
    <source src="http://video-js.zencoder.com/oceans-clip.mp4" type='video/mp4' />
    <source src="http://video-js.zencoder.com/oceans-clip.webm" type='video/webm' />
    <source src="http://video-js.zencoder.com/oceans-clip.ogv" type='video/ogg' />



    <track kind="captions" src="demo.captions.vtt" srclang="en" label="English"></track>
    <track kind="subtitles" src="demo.captions.vtt" srclang="en" label="English"></track>
    <p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
  </video> -->

<script type="text/javascript">
var video = document.createElement('video');
video.id = 'my-video';
video.src = 'http://video-js.zencoder.com/oceans-clip.mp4';
video.width = '1440';
video.height = '990';
video.class = "video-js vjs-default-skin";


// var player = videojs('my-video');
// player.dispose();

</script>



</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
  <!-- <link href="../js/video-js/video-js.css" rel="stylesheet" type="text/css"> -->
  <!-- <script src="../js/video-js/video.js"></script>   -->
  <script>
    // videojs.options.flash.swf = "video-js.swf";
  </script>
</head>
<body>
    <canvas id="canvas" width="1200" height="750"></canvas>

    <script type="text/javascript">                
        var video = document.createElement('video');
        video.src = 'http://video-js.zencoder.com/oceans-clip.mp4';
        video.controls = true;
        // video.id = 'my-video';
        video.width = '1440';
        video.height = '990';
        // video.class = "video-js vjs-default-skin";

        document.body.appendChild(video);

        $('#my-video').hide();
        
        var canvas = document.getElementById('canvas')
        var ctx = canvas.getContext('2d');
        
        video.onplay = function() {
            // canvas.width = video.videoWidth;
            // canvas.height = video.videoHeight;
            console.log('play!')
          draw();
        };
 
        function draw() {
            if(video.paused || video.ended) return false;
                ctx.drawImage(video, 0, 0);
                setTimeout(draw, 20);
        }
        type = 'video/mp3'
        if (video.canPlayType(type)) {
          console.log(type + ' Yes!');
        }else{
          console.log(type + ' No!');
        }

    </script>
</body>
</html>




<!DOCTYPE html>
<html>
<body>

<canvas id="fullscreen"></canvas>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>


<script type="text/javascript">
var sW = 720;
var sH = 450;

fsCanvas = document.getElementById("fullscreen");
fsCanvas.width = sW;
fsCanvas.height = sH;
fsctx = fsCanvas.getContext('2d');
fsctx.fillStyle = '#000';
fsctx.fillRect(0,0,sW,sH);
$('fullscreen').show();

function getgridloc(x, y, size, grids, spacing){
  var numy = grids[0];
  var numx = grids[1];
  var w = size[1], h = size[0];
  var loc = new Array(numy); // one row
  for(var i = 0; i < numy; i++){
    loc[i] = new Array(numx);
    for(var j = 0; j < numx; j++){
      loc[i][j] = new Array(2);
      loc[i][j][0] = x + (j+1)*spacing + j*w;
      loc[i][j][1] = y + (i+1)*spacing + i*h;
    }
  }
  return loc;
}


// function drawGrids(ctx, x, y, loc, size, sel, selans, color, selcolor, width, selwidth){
//  var numy = loc.length;
//  var numx = loc[0].length;
//  var w = size[1], h = size[0];
//  // draw grids
//  for(var i = 0; i < numy; i++){
//    for(var j = 0; j < numx; j++){
//      if(sel[i][j] == 0){
//        drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, color, width);     
//      }
//      else if(selans[i][j] == 1){
//        drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, selcolor[0], selwidth);
//      }
//      else{
//        drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, selcolor[1], selwidth);
//      }
//    }
//  }
// }

function drawGrids(ctx, x, y, loc, size, sel, selans, color, selcolor, width, selwidth){
  var numy = loc.length;
  var numx = loc[0].length;
  var w = size[1], h = size[0];
  // draw grids
  for(var i = 0; i < numy; i++){
    for(var j = 0; j < numx; j++){
      drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, color, width, '#F00');     
      // if(sel[i][j] == 0){
      //  drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, color, width);     
      // }
      // else if(selans[i][j] == 1){
      //  drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, selcolor[0], selwidth);
      // }
      // else{
      //  drawRoundCornerRect(ctx, loc[i][j][0], loc[i][j][1], w, h, selcolor[1], selwidth);
      // }
    }
  }
}



function drawRoundCornerRect(ctx, x, y, w, h, color, width, fillcolor){
  // Set faux rounded corners
  // ctx.lineJoin = 'round';
  // ctx.lineWidth = width;
  // ctx.strokeStyle = color;
  // rcorner = width;
  // ctx.strokeRect(x, y, w+(rcorner/2), h+(rcorner/2));
  // ctx.stroke();
  // ctx.lineJoin = 'miter';


  ctx.beginPath();
  ctx.lineJoin = 'round';
  ctx.lineWidth = width;
  ctx.strokeStyle = color;
  rcorner = width;
  // ctx.rect(x, y, w+(rcorner/2), h+(rcorner/2));
  ctx.strokeRect(x, y, w+(rcorner/2), h+(rcorner/2));
  ctx.fillStyle = 'yellow';
  ctx.stroke();
  ctx.lineJoin = 'miter';
  ctx.fill();

}


function nchoosekRandom(n, k){
  var idx = new Array(n);
  var ind = new Array(n);
  for(var i = 0; i < n; i++){
    idx[i] = i;
    ind[i] = false
  } 
  var loc = new Array(k);
  for(var i = 0; i < k; i++){
    var r = Math.floor(Math.random()*(n-i));
    var cnt = -1;
    for(var j = 0; j < n; j++){
      if(ind[j] == false){
        cnt++;
        if(cnt == r){
          ind[j] = true;
          loc[i] = j;
          break;
        }
      }
    }
  }
  return loc;
}


var gridColor = "#333333";
var selgridColor = ["#0F0", "#F00"];
var gridLineWidth = 2;
var selLineWidth = 5;


var numgrids = [3, 4];
var gridloc = getgridloc(0, 0, [100,100], numgrids, 5);

var gridsel = null; // 0: unchecked, 1: checked
var gridimgs = null; // image path
var gridselans = null;


var numimg = 15;
var numshown = 1;
var memshowidx = nchoosekRandom(numimg, numshown);
hitimgs = new Array(numimg+numgrids[0]*numgrids[1]-numshown);

for(var i = numimg; i < hitimgs.length; i++){
  memshowidx.push(i);
}

var memdispidx = nchoosekRandom(numgrids[0]*numgrids[1], numgrids[0]*numgrids[1]);
var memdispidx = nchoosekRandom(numgrids[0]*numgrids[1], numgrids[0]*numgrids[1]);
var cnt = 0;
gridsel = new Array(numgrids[0]); // check status
gridmark = new Array(numgrids[0]); // mark
gridimgs = new Array(numgrids[0]); // image path
for(var i = 0; i < numgrids[0]; i++){
  gridsel[i] = new Array(numgrids[1]);
  gridmark[i] = new Array(numgrids[1]);
  gridimgs[i] = new Array(numgrids[1]);
  for(var j = 0; j < numgrids[1]; j++){
    gridsel[i][j] = 0;
    gridmark[i][j] = 0;
    gridimgs[i][j] = memshowidx[memdispidx[cnt++]];
  }
}

// ground truth grid
gridselans = new Array(numgrids[0]);
for(var i = 0; i < numgrids[0]; i++){
  gridselans[i] = new Array(numgrids[1]);
  for(var j = 0; j < numgrids[1]; j++){
    gridselans[i][j] = 0;
    for(var k = 0; k < numshown; k++){
      if(gridimgs[i][j] == memshowidx[k]){
        gridselans[i][j] = 1;
        break;
      }
    }
  }
}
x = 0; y = 0;
gridsize = [100,100];
drawGrids(fsctx, x, y, gridloc, gridsize, gridsel, gridselans, gridColor, selgridColor, gridLineWidth, selLineWidth);







</script>
</body>
</html>






<!DOCTYPE html>
<html>
<body>


<!-- ****************** amazon mturk HIT layout ****************** -->
<!-- <h2 id="gamename" style="opacity:1;font-size:200%;">Gaze <img src="http://isun.cs.princeton.edu/pvgaze/mturk/instruction_imgs/gaze.png" height="40" align="top"> Game</h2> -->
<h2 id="gamename" style="opacity:1;font-size:200%;">Whac-A-Mole by Gaze</h2>

<li>  

  <p>This game uses your web camera to track where youâ€™re looking at the screen. See <a id="urlinstr" target="_blank">Detailed Instruction and Hardware Test</a></p>

  <img id="gamelogo" src="http://isun.cs.princeton.edu/gamegaze/icons/instr/whac_a_mole_gaze_px.png" width="650">

  </br></br>

  
  <!-- <button id="childOpener" onclick="OpenChildWindow ();">Play Whac-A-Mole</button> -->

  <span style="font-size:larger;font-weight:bold;" id="span_link"><a id="urltoclick" target="_blank">Click here</a> to work on the HIT (in a new tab).</span>

  </br></br>

  <input autocomplete="off" id="submitButton" onclick="return confirmSubmit()" type="submit" value="Submit"/> 




  <p><input type="hidden" id="assignmentId" name="assignmentId" value=""></p>

  <p><span style="color:red;">The game is still under developing, so we suggest you DO NOT spend hours on it if it doesn't work, because we will not be able to pay you unless you complete the task.</span></p>

  <p><span style="font-size:12px;">By playing this game, you are participating in a scientific study for eye-tracking prediction by students from Princeton University. Your participation in this research is voluntary. You may decline further participation, at any time, without adverse consequences. Your anonymity is assured: the images of your eyes seen from the webcam will not be released, and all information will be anonymized.</span></p>

  <p>If you have any comments for us, please let us know here (optional):</p>
  <textarea rows="3" cols="80" name="comments" id="comments"></textarea>  

  <p id="hitstatus" style="display: none;">Not Finished</p>

</li>


</br></br>


<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> 
<script type="text/javascript">


function confirmSubmit(){
  /*
  var code = $('#passcode').val();
  var correct = 'foo'; // later: encodeURL(url)
  if(code == correct){
    alert("Oh, no that code is not correct. If you completed the task but lost the code, enter LOST above. If you have not completed the task you can return the HIT.");
    return false;
  }else{
    return true;
  }
  */
}

function getURLParameter(VarSearch, defaultval){
    var SearchString = window.location.search.substring(1);
    var VariableArray = SearchString.split('&');
    for(var i = 0; i < VariableArray.length; i++){
        var KeyValuePair = VariableArray[i].split('=');
        if(KeyValuePair[0] == VarSearch){
            return KeyValuePair[1];
        }
    }
  return defaultval;
}
var displayElm2Center = function(id, w, h){
    var l = (w - $(id).width())/2;
    var t = (h - $(id).height())/2;
    $(id).css({left: l, top: t});
    $(id).show();
}


/*
var kidwindow;
function OpenChildWindow () {
    // kidwindow = window.open ("../test/testpopkid.html", "OpenerTest", "width=1200, height=900");
    kidwindow = window.open ("http://isun.cs.princeton.edu/gamegaze/test/testpopkid.html", "OpenerTest", "width=1200, height=900");
    // kidwindow = window.open ("http://isun.cs.princeton.edu/gamegaze/pxgazetrackr.html?workerId=PX2Y15M04_N16&experimentId=Whac&sunbatchid=batch20150405_whac&assignmentId=test&sunhitid=hitWhac20150405_1&numpts=9", "OpenerTest", "width=1200, height=900");

    checkhitstatus();
}
function checkhitstatus(){
  if ($('#hitstatus').html() == 'Submitable!!'){
    kidwindow.close();
    // hide play button
    $('#childOpener').hide();
    // display submit button
    $('#submitButton').show();
  }else{
    setTimeout(function() {
            checkhitstatus();
        }, 50);
  }
}
*/


$(document).ready(function(){
  $('body').css({
    "font-size": "16px",
    "font-family": "'Lucida Grande', Helvetica, Arial, Verdana, sans-serif",
    "text-align": "center",
    "background-color": "#F1F1F1"
  });
  $('li').css({
    "list-style-type": "none",
      "display": "inline-block",
      "padding": "20px 0px 20px",
      "min-height": "122px",
      "width": "800px",
      "border": "1px solid #dadada",
      "-webkit-border-radius": "5px",
      "-moz-border-radius": "5px",
      "border-radius": "5px",
      "background-color": "#FFFFFF"
  });
  $('p').css({
    "position":"relative",
    "width":"700px",
    "text-align": "left",
    "left":"50px"
  });

  $('#submitButton').css({
    "height": "50px",
    "font-size": "25px",
    "font-weight": "bold",
    "font-family":"'Lucida Grande', Helvetica, Arial, Verdana, sans-serif",
    "color": "#424242",
    "border-style": "none",
    "border-radius": "15px",
    "cursor":"pointer",
    "outline": 0
  });

  /*
  $('#childOpener').css({
    "height": "50px",
    "font-size": "25px",
    "font-weight": "bold",
    "font-family":"'Lucida Grande', Helvetica, Arial, Verdana, sans-serif",
    "color": "#424242",
    "border-style": "none",
    "border-radius": "15px",
    "cursor":"pointer",
    "outline": 0
  });

  $('#childOpener').css({"background-color":"#03a9f4", 'color':'#424242'});
    $('#childOpener').hover(
      function(){$(this).css({'color':'#eeeeee','background-color':'#29b6f6'});},
      function(){$(this).css({'color':'#424242','background-color':'#03a9f4'});}
  );*/

  $('#submitButton').css({"background-color":"#03a9f4", 'color':'#424242'});
    $('#submitButton').hover(
      function(){$(this).css({'color':'#eeeeee','background-color':'#29b6f6'});},
      function(){$(this).css({'color':'#424242','background-color':'#03a9f4'});}
  );

  $('#gamelogo').css({
    "border-radius":"25px",
  })
  $('.showlink').hide();

  // var hitID = getURLParameter('hitId');
  // var requesterID = getURLParameter('requesterId');
  var workerId = getURLParameter('workerId', null);
  var assignmentId = getURLParameter('assignmentId', null);
  // var experimentId = ${experimentId};
  // var sunbatchid = ${sunbatchid};

  // instruction webpage
  var instructionURL = 'http://isun.cs.princeton.edu/gamegaze/mturk/molegameinstruction.html';

  document.getElementById('assignmentId').value = assignmentId;


  // Check if the worker is PREVIEWING the HIT or if they've ACCEPTED the HIT
  if (assignmentId == "ASSIGNMENT_ID_NOT_AVAILABLE" || assignmentId == null){
    // do nothing
  }else{ // If HIT accepted
    var experimentURL = 'http://isun.cs.princeton.edu/pvgaze/pvgazetrackr.html';
    experimentURL += '?procedure=D&workerId=' + workerId + '&assignmentId=' + assignmentId + '&sunbatchid=' + 'batch20150410_WhacMIT1003_level1';
    $('#urltoclick').attr('href', experimentURL);
    $('#urladdress').html(experimentURL);
  }
});
</script>



<!-- ****************** amazon mturk HIT layout ****************** -->

</body>
</html>